<?php
namespace App\Controllers\Admin\V1;

use App\Libraries\ApiResponse;
use App\Controllers\BaseController;
use App\Traits\Crud\EntityListTrait;

/**
 * Generated by app:make:controller
 * - Extends BaseController
 * - Entity: \App\Entities\Course_configuration
 * - Slug: course_configuration
 */
class CourseConfigController extends BaseController
{
    use EntityListTrait;
    public function index()
    {
        $payload = $this->listApiEntity('course_configuration');
        return ApiResponse::success(data: $payload);
    }

    public function show(int $id)
    {
        $payload = $this->showListEntity('course_configuration', $id);
        return ApiResponse::success(data: $payload);
    }

    /**
     * @throws \Throwable
     */
    public function create()
    {
        $entity  = new \App\Entities\Course_configuration();
        $payload = requestPayload();

        $row = $entity->insertSingle(
            $payload ?? [],
            $this->request->getFiles() ?? []
        );

        if (!$row) {
            return ApiResponse::error("Unable to create course configuration");
        }
        
        $payload['id'] = $row;
        return ApiResponse::success('Course configuration inserted successfully', $payload);
    }

    /**
     * @throws \Throwable
     */
    public function update(int $id)
    {
        $entity  = new \App\Entities\Course_configuration();
        $payload = $this->request->getJSON(true);

        $row = $entity->updateSingle(
            $id,
            $payload ?? []
        );

        if (!$row) {
            return ApiResponse::error("Unable to update course configuration");
        }

        return ApiResponse::success('Course configuration updated successfully', $payload);
    }

    /**
     * @throws \Throwable
     */
    public function delete(int $id)
    {
        $entity = new \App\Entities\Course_configuration();

        $row = $entity->deleteSingle($id);
        if (!$row) {
            return ApiResponse::error("Unable to delete course configuration");
        }

        return ApiResponse::success('Course configuration deleted successfully');
    }

    public function import(){
        $course = new \App\Entities\Course_configuration();

        $rules = [
            'course_file' => [
                'label' => 'CSV file',
                'rules' => implode('|', [
                    'uploaded[course_file]',
                    'max_size[course_file,1024]',
                    'mime_in[course_file,text/plain,text/csv,application/csv,application/vnd.ms-excel,text/tab-separated-values]',
                    'ext_in[course_file,csv,txt,tsv]',
                ]),
            ],
        ];

        if (! $this->validate($rules)) {
            $errors = $this->validator->getErrors();
            return ApiResponse::error(reset($errors));
        }
        $file = $this->request->getFile('course_file');

        // Optional: preload a dictionary for fast upsert matching (CODE|DEPT_ID â†’ id)
        $cachePayload = [];
        $rows = $this->db->table('course_configuration')
            ->select('id, programme_id, semester, entry_mode, level')
            ->get()->getResultArray();
        foreach ($rows as $r) {
            $entryMode = removeNonAlphanumeric($r['entry_mode']);
            $key = $r['programme_id'].':'.$r['semester'].':'.$entryMode.':'.$r['level'];
            $cachePayload[$key] = $r['id'];
        }

        $preprocessRow = function(array $row): array {
            static $prog = [];
            $db = $this->db;
            $semesterStr = strtolower($row['semester']);
            $semester = ($semesterStr == 'first' || $semesterStr == 'first semester') ? 1 : 2;
            $row['semester'] = $semester;

            $level = !empty($row['level']) ? str_replace("00", "", $row['level']) : '';
            $row['level'] = $level;

            if (!empty($row['programme'])) {
                $c = strtolower(trim((string)$row['programme']));
                if (!isset($prog[$c])) {
                    $prog[$c] = (int)$db->table('programme')->select('id')->where('name', $c)->get()->getRow('id');
                }
                if ($prog[$c] <= 0) {
                    throw new \App\Exceptions\ValidationFailedException("unknown programme '{$c}'.");
                }
                $row['programme_id'] = $prog[$c];
            }
            unset($row['programme']);

            return $row;
        };

        // Callback: fast match for update/upsert
        $finder = function(array $row) use (&$cachePayload): ?int {
            $entryMode = removeNonAlphanumeric($row['entry_mode']);
            $code = $row['programme_id'].':'.$row['semester'].':'.$entryMode.':'.$row['level'];
            return $cachePayload[$code] ?? null;
        };

        $logFile = 'bulk_courses_config_log_' . date('Y-mM-dl h:i:s') . '_' . time() . '.txt';
        $logPath = WRITEPATH . "temp/logs/$logFile";

        $result = $course->bulkUpload(
            $file ?? [],
            [
                'mode'             => 'upsert',
                '__authorize__'             => 'course_import',
                'headerMap'        => [
                    'programme'      => 'programme',
                    'semester' => 'semester',
                    'level'   => 'level',
                    'entry_mode'   => 'entry_mode',
                    'min_unit'   => 'min_unit',
                    'max_unit'   => 'max_unit',
                ],
                'validateColumns'  => [
                    'programme',
                    'semester',
                    'level',
                    'entry_mode',
                    'min_unit',
                    'max_unit'
                ],
                'staticColumns'    => ['enable_reg' => 1],
                'updateFields' => ['semester', 'level', 'entry_mode', 'min_unit', 'max_unit'],

                'batchSize'        => 1000,
                'preprocessRow'    => $preprocessRow,
                'finder'           => $finder,
                'processLogPath'     => $logPath,
                'processLogMessage' => function(array $row){
                    return [
                        'insert' => "New Record has been inserted for programme: " . $row['programme'],
                        'update' => "Programme " . $row['programme'] . " has been updated",
                    ];
                }
            ]
        );
        $result['process_log_link'] = generateDownloadLink($logPath, 'temp/logs', 'logs');

        return ApiResponse::success('Courses config. imported successfully. Please click the link for full process log', $result);
    }

}
